services:
  database:
    image: postgres
    container_name: blog-db
    restart: unless-stopped
    env_file:
      - db.env
    volumes:
      - ./init-pg-trgm.sql:/docker-entrypoint-initdb.d/init-pg-trgm.sql
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      timeout: 10s
      interval: 30s
      retries: 5
      start_period: 10s

  redis:
      image: redis
      container_name: blog-redis
      restart: unless-stopped
      networks:
        - db-network
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        timeout: 5s
        interval: 10s
        retries: 5
        start_period: 5s

  backend:
    image: ${DOCKER_HUB_USER}/blog
    container_name: blog-app
    restart: unless-stopped
    env_file:
      - backend.env
    volumes:
      - static-volume:/app/static
    networks:
      - common-network
      - db-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx
    container_name: blog-nginx
    restart: unless-stopped
    env_file:
      - nginx.env
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template
      - ./index.html:/var/www/html/index.html
      - static-volume:/app/static
    networks:
      - common-network
    ports:
      - ${HOST_PORT}:80
    depends_on:
      database:
        condition: service_healthy
      backend:
        condition: service_started
      redis:
        condition: service_healthy

networks:
  common-network:
  db-network:

volumes:
  static-volume:
